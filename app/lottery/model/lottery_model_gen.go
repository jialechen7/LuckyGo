// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/SpectatorNan/gorm-zero/gormc/batchx"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGoLotteryLotteryLotteryIdPrefix = "cache:goLotteryLottery:lottery:id:"
)

type (
	lotteryModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Lottery) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Lottery) error
		FindOne(ctx context.Context, id int64) (*Lottery, error)
		Update(ctx context.Context, tx *gorm.DB, data *Lottery) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Lottery) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Lottery) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		// deprecated. recommend add a transaction in service context instead of using this
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultLotteryModel struct {
		gormc.CachedConn
		table string
	}

	Lottery struct {
		Id            int64        `gorm:"column:id;primary_key"`
		UserId        int64        `gorm:"column:user_id"`        // å‘èµ·æŠ½å¥–ç”¨æˆ·ID
		Name          string       `gorm:"column:name"`           // é»˜è®¤å–ä¸€ç­‰å¥–åç§°
		Thumb         string       `gorm:"column:thumb"`          // é»˜è®¤å–ä¸€ç­‰ç»é…å›¾
		PublishTime   sql.NullTime `gorm:"column:publish_time"`   // å‘å¸ƒæŠ½å¥–æ—¶é—´
		JoinNumber    int64        `gorm:"column:join_number"`    // è‡ªåŠ¨å¼€å¥–äººæ•°
		Introduce     string       `gorm:"column:introduce"`      // æŠ½å¥–è¯´æ˜Ž
		AwardDeadline time.Time    `gorm:"column:award_deadline"` // é¢†å¥–æˆªæ­¢æ—¶é—´
		IsSelected    int64        `gorm:"column:is_selected"`    // æ˜¯å¦ç²¾é€‰: 0å¦ 1æ˜¯
		AnnounceType  int64        `gorm:"column:announce_type"`  // å¼€å¥–è®¾ç½®ï¼š1æŒ‰æ—¶é—´å¼€å¥– 2æŒ‰äººæ•°å¼€å¥– 3å³æŠ½å³ä¸­
		AnnounceTime  time.Time    `gorm:"column:announce_time"`  // å¼€å¥–æ—¶é—´
		CreateTime    time.Time    `gorm:"column:create_time"`
		UpdateTime    time.Time    `gorm:"column:update_time"`
		IsAnnounced   int64        `gorm:"column:is_announced"`  // æ˜¯å¦å¼€å¥–ï¼š0æœªå¼€å¥– 1å·²ç»å¼€å¥–
		SponsorId     int64        `gorm:"column:sponsor_id"`    // å‘èµ·æŠ½å¥–èµžåŠ©å•†ID
		IsClocked     int64        `gorm:"column:is_clocked"`    // æ˜¯å¦å¼€å¯æ‰“å¡ä»»åŠ¡ï¼š0æœªå¼€å¯ 1å·²å¼€å¯
		ClockTaskId   int64        `gorm:"column:clock_task_id"` // æ‰“å¡ä»»åŠ¡ä»»åŠ¡ID
	}
)

func (Lottery) TableName() string {
	return "`lottery`"
}

func newLotteryModel(conn *gorm.DB, c cache.CacheConf) *defaultLotteryModel {
	return &defaultLotteryModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`lottery`",
	}
}

func (m *defaultLotteryModel) GetCacheKeys(data *Lottery) []string {
	if data == nil {
		return []string{}
	}
	goLotteryLotteryLotteryIdKey := fmt.Sprintf("%s%v", cacheGoLotteryLotteryLotteryIdPrefix, data.Id)
	cacheKeys := []string{
		goLotteryLotteryLotteryIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultLotteryModel) Insert(ctx context.Context, tx *gorm.DB, data *Lottery) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Omit(lotteryOmitColumns...).Save(&data).Error
	}, m.GetCacheKeys(data)...)
	return err
}
func (m *defaultLotteryModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Lottery) error {

	err := batchx.BatchExecCtx(ctx, m, news, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&news).Error
	})

	return err
}

func (m *defaultLotteryModel) FindOne(ctx context.Context, id int64) (*Lottery, error) {
	goLotteryLotteryLotteryIdKey := fmt.Sprintf("%s%v", cacheGoLotteryLotteryLotteryIdPrefix, id)
	var resp Lottery
	err := m.QueryCtx(ctx, &resp, goLotteryLotteryLotteryIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Lottery{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLotteryModel) Update(ctx context.Context, tx *gorm.DB, data *Lottery) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && errors.Is(err, ErrNotFound) {
		return err
	}
	clearKeys := append(m.GetCacheKeys(old), m.GetCacheKeys(data)...)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Omit(lotteryOmitColumns...).Save(data).Error
	}, clearKeys...)
	return err
}
func (m *defaultLotteryModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Lottery) error {
	clearData := make([]Lottery, 0, len(olds)+len(news))
	clearData = append(clearData, olds...)
	clearData = append(clearData, news...)
	err := batchx.BatchExecCtx(ctx, m, clearData, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&news).Error
	})

	return err
}

func (m *defaultLotteryModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if errors.Is(err, ErrNotFound) {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Lottery{}, id).Error
	}, m.GetCacheKeys(data)...)
	return err
}

func (m *defaultLotteryModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Lottery) error {
	err := batchx.BatchExecCtx(ctx, m, datas, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&datas).Error
	})

	return err
}

// deprecated. recommend add a transaction in service context instead of using this
func (m *defaultLotteryModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultLotteryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoLotteryLotteryLotteryIdPrefix, primary)
}

func (m *defaultLotteryModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Lottery{}).Where("`id` = ?", primary).Take(v).Error
}
